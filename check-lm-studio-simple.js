#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LM Studio
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch –≤ Node.js 18+
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node check-lm-studio-simple.js [url]
 * 
 * –ü—Ä–∏–º–µ—Ä:
 * node check-lm-studio-simple.js http://localhost:1234
 */

// URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è LM Studio
const DEFAULT_URL = 'http://localhost:1234';

// –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const targetUrl = process.argv[2] || DEFAULT_URL;

console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LM Studio');
console.log('=====================================');
console.log(`–¶–µ–ª–µ–≤–æ–π URL: ${targetUrl}`);
console.log('');

async function testConnection() {
  const results = {
    baseUrl: null,
    modelsEndpoint: null,
    available: false,
    models: [],
    errors: []
  };

  // –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π URL
  console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ URL...');
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000);
    
    const response = await fetch(targetUrl, {
      method: 'GET',
      signal: controller.signal
    });
    
    clearTimeout(timeoutId);
    
    if (response.ok) {
      results.baseUrl = {
        status: response.status,
        statusText: response.statusText,
        success: true
      };
      console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${response.status} ${response.statusText}`);
    } else {
      results.baseUrl = {
        status: response.status,
        statusText: response.statusText,
        success: false
      };
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
    }
  } catch (error) {
    results.errors.push(`–ë–∞–∑–æ–≤—ã–π URL: ${error.message}`);
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }

  // –¢–µ—Å—Ç 2: –≠–Ω–¥–ø–æ–∏–Ω—Ç –º–æ–¥–µ–ª–µ–π
  console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –º–æ–¥–µ–ª–µ–π...');
  const modelsUrl = `${targetUrl}/v1/models`;
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 10000);
    
    const response = await fetch(modelsUrl, {
      method: 'GET',
      signal: controller.signal
    });
    
    clearTimeout(timeoutId);
    
    if (response.ok) {
      const data = await response.json();
      results.modelsEndpoint = {
        status: response.status,
        statusText: response.statusText,
        success: true
      };
      results.models = data.data || [];
      results.available = true;
      
      console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${response.status} ${response.statusText}`);
      console.log(`   üì¶ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: ${results.models.length}`);
      
      if (results.models.length > 0) {
        console.log('   ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:');
        results.models.slice(0, 5).forEach((model, index) => {
          console.log(`      ${index + 1}. ${model.id}`);
        });
        if (results.models.length > 5) {
          console.log(`      ... –∏ –µ—â–µ ${results.models.length - 5} –º–æ–¥–µ–ª–µ–π`);
        }
      }
    } else {
      results.modelsEndpoint = {
        status: response.status,
        statusText: response.statusText,
        success: false
      };
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
      results.errors.push(`–ú–æ–¥–µ–ª–∏: ${response.status} ${response.statusText}`);
    }
  } catch (error) {
    results.errors.push(`–ú–æ–¥–µ–ª–∏: ${error.message}`);
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }

  // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤
  console.log('\nüìä –ò—Ç–æ–≥–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:');
  console.log('====================');
  
  if (results.available) {
    console.log('‚úÖ LM Studio –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
    console.log(`üìç –†–∞–±–æ—á–∏–π URL: ${targetUrl}`);
    console.log(`üì¶ –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: ${results.models.length}`);
    
    if (results.models.length > 0) {
      console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      console.log('   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—é–±–æ–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —á–∞—Ç–∞');
      console.log('   ‚Ä¢ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞');
      console.log('   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ LM Studio');
    }
  } else {
    console.log('‚ùå LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    console.log('\nüí° –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:');
    console.log('   1. –ó–∞–ø—É—â–µ–Ω –ª–∏ LM Studio?');
    console.log('   2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –ø–æ—Ä—Ç? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1234)');
    console.log('   3. –ó–∞–ø—É—â–µ–Ω –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≤ LM Studio?');
    console.log('   4. –ù–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∞–π—Ä–≤–æ–ª?');
    console.log('   5. –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –≤ LM Studio?');
    
    if (results.errors.length > 0) {
      console.log('\nüîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:');
      results.errors.forEach((error, index) => {
        console.log(`   ${index + 1}. ${error}`);
      });
    }
  }

  // –í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
  console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:');
  console.log(JSON.stringify(results, null, 2));

  return results;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
testConnection().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  process.exit(1);
});