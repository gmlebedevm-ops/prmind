import { db } from '@/lib/db';
import fs from 'fs';
import path from 'path';

interface ChecklistItem {
  title: string;
  completed: boolean;
  category: string;
  subcategory?: string;
}

interface ParsedChecklist {
  [category: string]: {
    [subcategory: string]: ChecklistItem[];
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
function cleanTitle(title: string): string {
  return title.trim()
    .replace(/[\ud800-\udfff]./g, '') // –£–¥–∞–ª—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã
    .replace(/^[üîêüë•üìÅ‚úÖüè∑Ô∏èüí¨‚è∞üìäüìÖüìàü§ñüì°üîçüìéüì±üåêüé®üõ†Ô∏èüìàüîíüß™üìöüöÄ\s]+/, '') // –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ
    .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
    .trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CHECKLIST.md
function parseChecklist(): ParsedChecklist {
  const checklistPath = path.join(process.cwd(), 'CHECKLIST.md');
  const content = fs.readFileSync(checklistPath, 'utf-8');
  
  const result: ParsedChecklist = {};
  let currentCategory = '';
  let currentSubcategory = '';
  
  const lines = content.split('\n');
  
  for (const line of lines) {
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (## üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
    const categoryMatch = line.match(/^##\s+(?:[üîêüë•üìÅ‚úÖüè∑Ô∏èüí¨‚è∞üìäüìÖüìàü§ñüì°üîçüìéüì±üåêüé®üõ†Ô∏èüìàüîíüß™üìöüöÄ]\s*)?(.+)$/);
    if (categoryMatch) {
      currentCategory = cleanTitle(categoryMatch[1]);
      currentSubcategory = '';
      result[currentCategory] = {};
      continue;
    }
    
    // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (### ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ)
    const subcategoryMatch = line.match(/^###\s+(.+)$/);
    if (subcategoryMatch && currentCategory) {
      currentSubcategory = cleanTitle(subcategoryMatch[1]);
      result[currentCategory][currentSubcategory] = [];
      continue;
    }
    
    // –ü—É–Ω–∫—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞ (- [x] –¢–µ–∫—Å—Ç –∏–ª–∏ - [ ] –¢–µ–∫—Å—Ç)
    const itemMatch = line.match(/^-\s+\[([x])\]\s*(.+)$/);
    if (itemMatch && currentCategory && currentSubcategory) {
      const completed = itemMatch[1] === 'x';
      const title = itemMatch[2].trim();
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
      if (title.includes('–ß–µ–∫-–ª–∏—Å—Ç –æ—Å–Ω–æ–≤–∞–Ω') || title.includes('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è')) {
        continue;
      }
      
      result[currentCategory][currentSubcategory].push({
        title,
        completed,
        category: currentCategory,
        subcategory: currentSubcategory
      });
    }
  }
  
  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏
function getTaskStatus(completed: boolean): 'TODO' | 'IN_PROGRESS' | 'DONE' {
  if (completed) return 'DONE';
  return 'TODO';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏
function getTaskPriority(title: string): 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT' {
  const lowerTitle = title.toLowerCase();
  
  if (lowerTitle.includes('—Å—Ä–æ—á–Ω–æ') || lowerTitle.includes('–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π') || lowerTitle.includes('–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å')) {
    return 'URGENT';
  }
  
  if (lowerTitle.includes('–≤–∞–∂–Ω–æ') || lowerTitle.includes('–æ—Å–Ω–æ–≤–Ω–æ–π') || lowerTitle.includes('–∫–ª—é—á–µ–≤–æ–π')) {
    return 'HIGH';
  }
  
  if (lowerTitle.includes('–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ') || lowerTitle.includes('–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ') || lowerTitle.includes('—É–ª—É—á—à–µ–Ω–∏–µ')) {
    return 'LOW';
  }
  
  return 'MEDIUM';
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
async function createChecklistTasks() {
  try {
    const projectId = 'cmejt24gq0005mdn3p8a7q3ki'; // ID –ø—Ä–æ–µ–∫—Ç–∞ "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ProjectMind"
    const creatorId = 'cmejls36z0000mdpbs6mct6g6'; // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    console.log('–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ CHECKLIST.md...');
    const checklist = parseChecklist();
    
    console.log('–°–æ–∑–¥–∞—é –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞...');
    
    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let mainTasksCreated = 0;
    let subtasksCreated = 0;
    
    for (const [category, subcategories] of Object.entries(checklist)) {
      const cleanCategory = cleanTitle(category);
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (cleanCategory.includes('–°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏') || 
          cleanCategory.includes('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏') || 
          cleanCategory.includes('–ü—Ä–∏–º–µ—á–∞–Ω–∏—è') ||
          cleanCategory.includes('–û–±–∑–æ—Ä')) {
        console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Å–ª—É–∂–µ–±–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${cleanCategory}`);
        continue;
      }
      
      console.log(`\nüìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${cleanCategory}`);
      
      // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const mainTask = await db.task.create({
        data: {
          title: cleanCategory,
          description: `–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${cleanCategory}`,
          status: 'TODO',
          priority: 'HIGH',
          projectId,
          creatorId,
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á
          dueDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000)
        }
      });
      
      mainTasksCreated++;
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: ${cleanCategory} (ID: ${mainTask.id})`);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—É–Ω–∫—Ç—ã
      for (const [subcategory, items] of Object.entries(subcategories)) {
        const cleanSubcategory = cleanTitle(subcategory);
        console.log(`  üìã –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${cleanSubcategory}`);
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—É–Ω–∫—Ç—ã
        if (items.length > 0) {
          const subcategoryTask = await db.task.create({
            data: {
              title: `${cleanCategory} - ${cleanSubcategory}`,
              description: `–ó–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${cleanSubcategory}`,
              status: getTaskStatus(items.every(item => item.completed)),
              priority: 'MEDIUM',
              projectId,
              creatorId,
              parentTaskId: mainTask.id,
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ —á–µ—Ä–µ–∑ 1-2 –º–µ—Å—è—Ü–∞
              dueDate: new Date(Date.now() + 45 * 24 * 60 * 60 * 1000)
            }
          });
          
          console.log(`    ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${cleanSubcategory} (ID: ${subcategoryTask.id})`);
          
          // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞
          for (const item of items) {
            const cleanItemTitle = cleanTitle(item.title);
            const subtask = await db.task.create({
              data: {
                title: cleanItemTitle,
                description: `–ü—É–Ω–∫—Ç —á–µ–∫-–ª–∏—Å—Ç–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${cleanCategory}"`,
                status: getTaskStatus(item.completed),
                priority: getTaskPriority(cleanItemTitle),
                projectId,
                creatorId,
                parentTaskId: subcategoryTask.id,
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ —á–µ—Ä–µ–∑ 2-4 –Ω–µ–¥–µ–ª–∏
                dueDate: new Date(Date.now() + 21 * 24 * 60 * 60 * 1000),
                // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                completedAt: item.completed ? new Date() : null
              }
            });
            
            subtasksCreated++;
            console.log(`      ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∞: ${cleanItemTitle.substring(0, 50)}... (${item.completed ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' : '–í —Ä–∞–±–æ—Ç–µ'})`);
          }
        }
      }
    }
    
    console.log('\nüéâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á:');
    console.log(`üìä –û—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ: ${mainTasksCreated}`);
    console.log(`üìã –ó–∞–¥–∞—á –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–æ: ${mainTasksCreated}`); // –ü–æ –æ–¥–Ω–æ–π –Ω–∞ –∫–∞–∂–¥—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
    console.log(`‚úÖ –ü–æ–¥–∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ: ${subtasksCreated}`);
    console.log(`üìà –í—Å–µ–≥–æ –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ: ${mainTasksCreated + mainTasksCreated + subtasksCreated}`);
    
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    const taskCount = await db.task.count({
      where: { projectId }
    });
    
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ: ${taskCount}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏–µ—Ä–∞—Ä—Ö–∏–∏
    const sampleMainTask = await db.task.findFirst({
      where: { 
        projectId,
        parentTaskId: null 
      },
      include: {
        subtasks: {
          include: {
            subtasks: true
          }
        }
      }
    });
    
    if (sampleMainTask) {
      console.log('\nüìã –ü—Ä–∏–º–µ—Ä –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∑–∞–¥–∞—á:');
      console.log(`üìÇ ${sampleMainTask.title}`);
      for (const subcategoryTask of sampleMainTask.subtasks) {
        console.log(`  üìã ${subcategoryTask.title} (${subcategoryTask.status})`);
        for (const itemTask of subcategoryTask.subtasks) {
          console.log(`    ‚úÖ ${itemTask.title} (${itemTask.status})`);
        }
      }
    }
    
    console.log('\n‚úÖ –ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ CHECKLIST.md!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  createChecklistTasks()
    .then(() => {
      console.log('\nüöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { createChecklistTasks, parseChecklist };