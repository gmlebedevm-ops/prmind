import { db } from '@/lib/db';
import fs from 'fs';
import path from 'path';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
function cleanTitle(title: string): string {
  return title.trim()
    .replace(/[\ud800-\udfff]./g, '') // –£–¥–∞–ª—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã
    .replace(/^[üîêüë•üìÅ‚úÖüè∑Ô∏èüí¨‚è∞üìäüìÖüìàü§ñüì°üîçüìéüì±üåêüé®üõ†Ô∏èüìàüîíüß™üìöüöÄ\s]+/, '') // –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ
    .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
    .trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CHECKLIST.md
function parseChecklistSimple() {
  const checklistPath = path.join(process.cwd(), 'CHECKLIST.md');
  const content = fs.readFileSync(checklistPath, 'utf-8');
  
  const categories: string[] = [];
  const lines = content.split('\n');
  
  for (const line of lines) {
    const categoryMatch = line.match(/^##\s+(?:[üîêüë•üìÅ‚úÖüè∑Ô∏èüí¨‚è∞üìäüìÖüìàü§ñüì°üîçüìéüì±üåêüé®üõ†Ô∏èüìàüîíüß™üìöüöÄ]\s*)?(.+)$/);
    if (categoryMatch) {
      const category = cleanTitle(categoryMatch[1]);
      categories.push(category);
    }
  }
  
  return categories;
}

async function debugChecklist() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CHECKLIST.md...');
    
    const categories = parseChecklistSimple();
    console.log('üìÇ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
    categories.forEach((cat, index) => {
      console.log(`${index + 1}. "${cat}" (–¥–ª–∏–Ω–∞: ${cat.length})`);
      console.log(`   Bytes: ${Array.from(cat).map(c => c.charCodeAt(0).toString(16).padStart(4, '0')).join(' ')}`);
    });
    
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏...');
    
    const projectId = 'cmejt24gq0005mdn3p8a7q3ki';
    const creatorId = 'cmejls36z0000mdpbs6mct6g6';
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–µ–¥–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∑–∞–≤–µ—Ä—à–∏–º —Ä–∞–±–æ—Ç—É
    console.log('\nüìã –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã—à–µ.');
    return;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  debugChecklist()
    .then(() => {
      console.log('\nüöÄ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}