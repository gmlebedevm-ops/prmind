import { db } from '@/lib/db';
import * as fs from 'fs';
import * as path from 'path';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–¥–∞—á–∏ –∏–∑ —á–µ–∫-–ª–∏—Å—Ç–∞
interface ChecklistTask {
  title: string;
  completed: boolean;
  category: string;
  subcategory?: string;
  description?: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CHECKLIST.md
function parseChecklist(content: string): ChecklistTask[] {
  const tasks: ChecklistTask[] = [];
  const lines = content.split('\n');
  
  let currentCategory = '';
  let currentSubcategory = '';
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (!line || line.startsWith('#') || line.startsWith('---')) {
      continue;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π)
    if (line.match(/^## [üîêüë•üìÅ‚úÖüè∑Ô∏èüí¨‚è∞üìäüìÖüìàü§ñüì°üîçüìéüì±üåêüé®üõ†Ô∏èüìàüîíüß™üìöüöÄ]/)) {
      currentCategory = line.replace(/^## [üîêüë•üìÅ‚úÖüè∑Ô∏èüí¨‚è∞üìäüìÖüìàü§ñüì°üîçüìéüì±üåêüé®üõ†Ô∏èüìàüîíüß™üìöüöÄ]\s*/, '');
      currentSubcategory = '';
      continue;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if (line.startsWith('### ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ') || line.startsWith('### ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞')) {
      currentSubcategory = line.replace(/^### [‚úÖ‚ùå]\s*/, '');
      continue;
    }
    
    // –ü–∞—Ä—Å–∏–º –∑–∞–¥–∞—á–∏
    const taskMatch = line.match(/^- \[([x ])\] (.+)$/);
    if (taskMatch) {
      const completed = taskMatch[1] === 'x';
      const title = taskMatch[2];
      
      tasks.push({
        title,
        completed,
        category: currentCategory,
        subcategory: currentSubcategory,
        description: `–ó–∞–¥–∞—á–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${currentCategory}"${currentSubcategory ? `, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è "${currentSubcategory}"` : ''}`
      });
    }
  }
  
  return tasks;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∑–∞–¥–∞—á
async function createProjectMindProject() {
  try {
    console.log('–ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ProjectMind"...');
    
    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ CHECKLIST.md
    const checklistPath = path.join(process.cwd(), 'CHECKLIST.md');
    
    console.log('–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:', checklistPath);
    
    if (!fs.existsSync(checklistPath)) {
      throw new Error(`–§–∞–π–ª CHECKLIST.md –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: ${checklistPath}`);
    }
    
    const checklistContent = fs.readFileSync(checklistPath, 'utf8');
    const tasks = parseChecklist(checklistContent);
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${tasks.length} –∑–∞–¥–∞—á –≤ CHECKLIST.md`);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    const project = await db.project.create({
      data: {
        title: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ProjectMind',
        description: '–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏ —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º. –ü—Ä–æ–µ–∫—Ç –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –æ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π.',
        status: 'ACTIVE',
        startDate: new Date(),
        endDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // +1 –≥–æ–¥
      },
    });
    
    console.log(`–ü—Ä–æ–µ–∫—Ç "${project.title}" —Å–æ–∑–¥–∞–Ω —Å ID: ${project.id}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    const adminUser = await db.user.findFirst({
      where: { role: 'ADMIN' }
    });
    
    if (!adminUser) {
      throw new Error('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    await db.projectMember.create({
      data: {
        projectId: project.id,
        userId: adminUser.id,
        role: 'OWNER',
      },
    });
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${adminUser.email} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    const categories = [...new Set(tasks.map(task => task.category))];
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`);
    
    for (const category of categories) {
      const categoryTasks = tasks.filter(task => task.category === category);
      
      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}" —Å ${categoryTasks.length} –∑–∞–¥–∞—á–∞–º–∏`);
      
      // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const mainTask = await db.task.create({
        data: {
          title: category,
          description: `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}". –í–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è ${categoryTasks.length} –ø–æ–¥–∑–∞–¥–∞—á.`,
          projectId: project.id,
          priority: 'HIGH',
          status: categoryTasks.some(task => !task.completed) ? 'IN_PROGRESS' : 'DONE',
          creatorId: adminUser.id,
        },
      });
      
      console.log(`–°–æ–∑–¥–∞–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ "${category}" —Å ID: ${mainTask.id}`);
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      for (const taskData of categoryTasks) {
        try {
          const subtask = await db.task.create({
            data: {
              title: taskData.title,
              description: taskData.description,
              projectId: project.id,
              parentTaskId: mainTask.id,
              priority: taskData.completed ? 'LOW' : 'MEDIUM',
              status: taskData.completed ? 'DONE' : 'TODO',
              creatorId: adminUser.id,
            },
          });
          
          console.log(`  - –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∞ "${taskData.title}" (${taskData.completed ? '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞' : '–≤ —Ä–∞–±–æ—Ç–µ'})`);
        } catch (subtaskError) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏ "${taskData.title}":`, subtaskError);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–æ–¥–∑–∞–¥–∞—á –¥–∞–∂–µ –µ—Å–ª–∏ –æ–¥–Ω–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å
        }
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalTasks = tasks.length;
    const completedTasks = tasks.filter(task => task.completed).length;
    const progress = Math.round((completedTasks / totalTasks) * 100);
    
    console.log('\n=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ===');
    console.log(`–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${totalTasks}`);
    console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedTasks}`);
    console.log(`–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%`);
    console.log(`–ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`);
    
    console.log('\n‚úÖ –ü—Ä–æ–µ–∫—Ç "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ProjectMind" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å–æ –≤—Å–µ–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏–∑ CHECKLIST.md!');
    
    return {
      success: true,
      projectId: project.id,
      totalTasks,
      completedTasks,
      progress,
      categories: categories.length
    };
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
if (require.main === module) {
  createProjectMindProject()
    .then(() => {
      console.log('\n–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { createProjectMindProject, parseChecklist };