import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { requireAuth } from '@/lib/auth';
import { z } from 'zod';
import { generateAIResponse } from '@/lib/ai-providers';

const createTaskSchema = z.object({
  projectId: z.string().min(1, 'ID –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
  description: z.string().min(1, '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
  chatId: z.string().optional(),
});

export async function POST(request: NextRequest) {
  return await requireAuth(request, async (request: NextRequest, user) => {
    try {
      const body = await request.json();
      const { projectId, description, chatId } = createTaskSchema.parse(body);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
      const projectMember = await db.projectMember.findUnique({
        where: {
          projectId_userId: {
            projectId,
            userId: user.id,
          },
        },
      });

      if (!projectMember && user.role !== 'ADMIN') {
        return NextResponse.json(
          { error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É' },
          { status: 403 }
        );
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const project = await db.project.findUnique({
        where: { id: projectId },
        select: { title: true, description: true },
      });

      if (!project) {
        return NextResponse.json(
          { error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' },
          { status: 404 }
        );
      }

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let aiSettings = await db.aISettings.findUnique({
        where: { userId: user.id },
      });

      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (!aiSettings) {
        aiSettings = await db.aISettings.create({
          data: {
            userId: user.id,
            provider: 'Z_AI',
            maxTokens: 1000,
            temperature: 0.7,
            enabled: true,
          },
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ AI
      if (!aiSettings.enabled) {
        return NextResponse.json(
          { error: 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö' },
          { status: 400 }
        );
      }

      try {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
        const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞.

–ü—Ä–æ–µ–∫—Ç: ${project.title}
–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ${project.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}
–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${description}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
{
  "title": "–ö—Ä–∞—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
  "description": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏",
  "priority": "LOW, MEDIUM –∏–ª–∏ HIGH",
  "status": "TODO, IN_PROGRESS –∏–ª–∏ REVIEW",
  "dueDate": "–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –∏–ª–∏ null",
  "estimatedHours": "–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö –∏–ª–∏ null",
  "tags": ["–º–∞—Å—Å–∏–≤", "—Ç–µ–≥–æ–≤", "—Å–≤—è–∑–∞–Ω–Ω—ã—Ö", "—Å", "–∑–∞–¥–∞—á–µ–π"]
}

–í–∞–∂–Ω–æ: –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        const aiResponse = await generateAIResponse(aiSettings, [
          {
            role: 'system',
            content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞–º–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.',
          },
          {
            role: 'user',
            content: prompt,
          },
        ]);

        // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
        let taskData;
        try {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ AI –¥–æ–±–∞–≤–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç)
          const jsonMatch = aiResponse.content.match(/\{[\s\S]*\}/);
          if (!jsonMatch) {
            throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω JSON –≤ –æ—Ç–≤–µ—Ç–µ AI');
          }
          taskData = JSON.parse(jsonMatch[0]);
        } catch (parseError) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
          throw new Error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ AI');
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç AI
        const validatedTaskData = z.object({
          title: z.string().min(1),
          description: z.string().min(1),
          priority: z.enum(['LOW', 'MEDIUM', 'HIGH']).optional(),
          status: z.enum(['TODO', 'IN_PROGRESS', 'REVIEW']).optional(),
          dueDate: z.string().nullable().optional(),
          estimatedHours: z.number().nullable().optional(),
          tags: z.array(z.string()).optional(),
        }).parse(taskData);

        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const task = await db.task.create({
          data: {
            title: validatedTaskData.title,
            description: validatedTaskData.description,
            priority: validatedTaskData.priority || 'MEDIUM',
            status: validatedTaskData.status || 'TODO',
            dueDate: validatedTaskData.dueDate ? new Date(validatedTaskData.dueDate) : null,
            estimatedHours: validatedTaskData.estimatedHours,
            projectId,
            assigneeId: user.id, // –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞—á—É —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            tags: validatedTaskData.tags || [],
          },
          include: {
            assignee: {
              select: {
                id: true,
                name: true,
                email: true,
              },
            },
            project: {
              select: {
                id: true,
                title: true,
              },
            },
          },
        });

        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω chatId, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
        if (chatId) {
          const aiChat = await db.aIChat.findFirst({
            where: {
              id: chatId,
              userId: user.id,
            },
          });

          if (aiChat) {
            const messages = aiChat.messages as any[];
            messages.push({
              role: 'assistant',
              content: `‚úÖ –ó–∞–¥–∞—á–∞ "${task.title}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\nüìã **–û–ø–∏—Å–∞–Ω–∏–µ:** ${task.description}\nüéØ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** ${task.priority}\nüìä **–°—Ç–∞—Ç—É—Å:** ${task.status}\nüë§ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** ${task.assignee.name || task.assignee.email}\nüìÖ **–°—Ä–æ–∫:** ${task.dueDate ? new Date(task.dueDate).toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω'}`,
            });

            await db.aIChat.update({
              where: { id: chatId },
              data: { messages },
            });
          }
        }

        return NextResponse.json({
          message: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
          task,
          provider: aiSettings.provider,
          model: aiResponse.model,
        });
      } catch (aiError) {
        console.error('–û—à–∏–±–∫–∞ AI:', aiError);
        
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ AI, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–¥–∞—á—É
        const task = await db.task.create({
          data: {
            title: `–ó–∞–¥–∞—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ: ${description.substring(0, 50)}${description.length > 50 ? '...' : ''}`,
            description,
            priority: 'MEDIUM',
            status: 'TODO',
            projectId,
            assigneeId: user.id,
          },
          include: {
            assignee: {
              select: {
                id: true,
                name: true,
                email: true,
              },
            },
            project: {
              select: {
                id: true,
                title: true,
              },
            },
          },
        });

        return NextResponse.json({
          message: '–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ (–±–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)',
          task,
          warning: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Å AI, —Å–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –∑–∞–¥–∞—á–∞',
          error: aiError instanceof Error ? aiError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        });
      }
    } catch (error) {
      if (error instanceof z.ZodError) {
        return NextResponse.json(
          { error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', details: error.errors },
          { status: 400 }
        );
      }

      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ AI:', error);
      return NextResponse.json(
        { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
        { status: 500 }
      );
    }
  });
}